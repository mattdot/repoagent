{"query":[{"role":"system","text":"You are a helpful assistant that analyzes and improves GitHub issues using natural language. All responses must be valid JSON."},{"role":"user","text":"## GitHub Issue Context Title: Win Detection Bug Body: As a developer, I want to fix the issue where the game fails to detect a win in certain scenarios so that the game ends correctly. Acceptance Criteria: The game correctly detects wins for all possible row, column, and diagonal combinations. Implementation Details: Debug and test the win detection logic for edge cases.## Evaluation Instructions. You must return your response as a single valid JSON object. Do not include any markdown, code blocks, or extra commentary. Assess the issue as a candidate user story for engineering work. Your response must include the following fields: summary: A concise, AI-enhanced summary or insight about the story.- completeness: An object with keys 'title', 'description', and 'acceptance_criteria', each with values 'Yes' or 'No'. - importance: Why the story matters (business value, user need, technical dependency). - acceptance_criteria_evaluation: Analysis of the acceptance criteria for clarity, specificity, and testability via automation. If not automatable, include a warning and suggest improvements. labels: An array of up to 3 relevant GitHub labels (e.g. 'bug', 'enhancement', 'good first issue'). - ready_to_work: Boolean. True if all elements are present, clear purpose, and testable acceptance criteria. - base_story_not_clear: Boolean. True if the title or description is vague, placeholder-like, or lacks meaningful value (e.g. 'Test', 'TBD', 'No update provided'). - refactored_story: An object with keys 'title', 'description', and 'acceptance_criteria' (an array of strings). Only include this if ready_to_work is False AND base_story_not_clear is False. If any field is unchanged, copy it verbatim from the original.  If base_story_not_clear is True or ready_to_work is True, omit the 'refactored_story' field entirely.  Example JSON response: {'summary': '<your insight>',   'completeness': {     'title': 'yes',     'description': 'Yes' ,   'acceptance_criteria': 'No'   },   'importance': '<why it matters>',   'acceptance_criteria_evaluation':'<analysis + any testability warning>',   'labels': ['bug', 'enhancement'],   'ready_to_work' :false,'base_story_not_clear': false,   'refactored_story': {     'title': 'Refined or original title',     'description': 'Expanded or original explanation with business value or user need',   'acceptance_criteria': [       'criterion one',       'criterion two'     ]   } } "}],"response":[{"summary":"The issue focuses on fixing a bug in the game's win detection logic to ensure proper game functionality by addressing edge cases.","completeness":{"title":"Yes","description":"Yes","acceptance_criteria":"No"},"importance":"This story is important as it ensures the game's core functionality, directly affecting both the user experience and the integrity of the game logic. Without accurate win detection, the game may behave unpredictably, leading to user frustration.","acceptance_criteria_evaluation":"The acceptance criteria outline the need to detect wins for row, column, and diagonal combinations, but they lack specificity. Key questions include: What edge cases need to be tested? Are there specific scenarios or inputs that are failing currently? Automation is possible but requires detailed test cases. Suggest explicitly listing known failing scenarios or defining each combination precisely to improve clarity and testability.","labels":["bug","enhancement"],"ready_to_work":false,"base_story_not_clear":false,"refactored_story":{"title":"Win Detection Bug","description":"As a developer, I want to fix the issue where the game logic fails to detect wins in certain scenarios so that gameplay ends correctly. This includes ensuring accurate detection for all possible win conditions (e.g., rows, columns, diagonals).","acceptance_criteria":["The game must correctly detect wins for all horizontal row combinations.","The game must correctly detect wins for all vertical column combinations.","The game must correctly detect wins for all diagonal combinations.","Tests must cover edge scenarios where incomplete or overlapping patterns could affect detection logic."]}}], "ground_truth": "You must return your response as a single valid JSON object"}